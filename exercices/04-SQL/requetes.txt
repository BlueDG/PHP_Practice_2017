1°) 

/* La liste des bureaux (adresse et ville) triés par pays décroissant puis par état */
/* RESULTAT ==> 7 lignes / 100 Market Street */

Réponse:
SELECT addressLine1, addressLine2, city, country, state
FROM offices
ORDER BY country DESC, state

2°) 

/* La liste des avions (code et nom) triés par vendeur décroissants et par quantité en stock décroissants */
/* RESULTAT ==> 12 lignes / 1900s Vintage Tri-Plane */

Réponse : 
SELECT `productCode`, `productName`, `productVendor`, `quantityInStock`, `productLine` 
FROM `products` 
WHERE `productLine` = 'Planes'
ORDER BY `productVendor` DESC, `quantityInStock` DESC


3°)
    
/* La liste des produits (nom, vendeur et prix de vente) qui sont vendus au moins 132$ triés par nom du produit */
/* RESULTAT ==> 24 lignes / 1903 Ford Model A */


Réponse:
SELECT `productName`, `productVendor`, `MSRP`
    FROM `products` 
    WHERE `MSRP` >= 132
    ORDER BY `productName`
    
4°) 
    
/* La liste des produits (code, nom, échelle et quantité) qui ont une échelle soit de 1:10, soit de 1:18 triés par quantité en stock décroissante */
/* RESULTAT ==> 48 lignes / 1995 Honda Civic */

Réponse:    
SELECT `productCode`,`productScale`,`productName`,`quantityInStock` 
FROM `products` 
WHERE `productScale` = '1:10' OR `productScale` = '1:18'
ORDER BY `quantityInStock` DESC

OU

SELECT `productCode`,`productScale`,`productName`,`quantityInStock` 
FROM `products` 
WHERE `productScale` IN ('1:10', '1:18')
ORDER BY `quantityInStock` DESC
    
    
    
5°)
    
/* La liste des produits (code, nom et prix d'achat) des produits achetés au moins 60$ au plus 90$ triés par prix d'achat */
/* RESULTAT ==> 34 lignes / 1937 Lincoln Berline */

Réponse:
SELECT `productCode`,`productName`,`buyPrice`
FROM `products` 
WHERE `buyPrice` >= 60 AND `buyPrice` <= 90
ORDER BY `buyPrice`

OU

SELECT `productCode`,`productName`,`buyPrice`
FROM `products` 
WHERE `buyPrice` BETWEEN 60 AND 90
ORDER BY `buyPrice`



/******** COLONNES CALCULEES ********/
    
    
    
6°) 

/* La liste des motos (nom, vendeur, quantité et marge) triés par marge décroissante */
/* RESULTAT ==> 13 lignes / 2003 Harley-Davidson Eagle Drag Bike */

Réponse:
SELECT `productName`, `productVendor`, `quantityInStock`, `buyPrice` - `MSRP` AS Marge 
FROM `products` 
WHERE `productLine` = 'Motorcycles' // On ne peut pas utiliser l'alias dans la close WHERE car WHERE est examiné en premier
ORDER BY `buyPrice` - `MSRP` DESC  // On peut utiliser l'alias dans la close ORDER


7°)

/* La liste des commandes (numéro, date de commande, date d'expédition, écart en jours entre les deux dates et statut) qui sont en cours de traitement ou qui ont été expédiées et ont un écart de plus de 10j triés par écart décroissant puis par date de commande */
/* RESULTAT ==> 7 lignes / 10165 */

Réponse:
SELECT orderNumber, orderDate, shippedDate, DATEDIFF(shippedDate,orderDate) AS processTime, status
FROM orders
WHERE status = 'In Process' OR (status = 'Shipped' AND DATEDIFF(shippedDate,orderDate) > 10)
ORDER BY processTime DESC, orderDate



8°)

/*La liste des produits (nom et valeur du stock à la vente) des années 1960 */
/* RESULTAT ==> 16 lignes / 1969 Harley Davidson Ultimate Chopper */

À savoir:
SQL LIKE = fait une recherche textuelle grâce à la première lettre
exemple: WHERE 'customerName' LIKE  'A%' (commence par)  Dit recherche textuelle Dit entre ""
                                    '%.CO' (finit par)
                                    '%&%' (Au milieu)
                                    
                                    
Réponse:
SELECT `productName`, (`quantityInStock`*`MSRP`) AS stockValue
FROM `products` 
WHERE `productName` LIKE '196%'

OU 

SELECT `productName`, (`quantityInStock` * `MSRP`) AS stockValue
FROM products
WHERE `productName` BETWEEN '1960' AND '1969' Entre "" quand même mais recherche alphanumérique (de caractère)



/******** AGGREGATION ********/

9°) 

/* Le prix de vente moyen d'un produit par vendeur triés par prix moyen décroissant */
/* RESULTAT ==> 13 lignes / Welly Diecast Productions / 113.9325 */

Réponse:
SELECT `productVendor`, AVG (`MSRP`) AS averagePrice
FROM `products` 
GROUP BY `productVendor`
ORDER BY averagePrice DESC


10°)

/* Le nombre de produits pour chaque ligne de produit */
/* RESULTAT ==> 7 lignes / Classic Cars / 38 */

Réponse:
SELECT `productLine`, SUM(quantityInStock)
FROM `products` 
GROUP BY `productLine`




11°)

/* Le total du stock et le total de la valeur du stock à la vente de chaque ligne de produit pour les produits vendus plus de 100$ trié par total de la valeur du stock à la vente */
/* RESULTAT ==> 7 lignes / Ships / 429177.74 */
    
SELECT SUM(`quantityInStock`) AS totalStock, SUM(`quantityInStock`*`MSRP`) AS totalStockValue, `MSRP`, `productLine`
FROM `products`
WHERE `MSRP` > 100
GROUP BY `productLine`
ORDER BY totalStockValue


12°)
    
/* La quantité du produit le plus en stock de chaque vendeur trié par vendeur */
/* RESULTAT ==> 13 lignes / Autoart Studio Design / 9354 */

Réponse:
SELECT  `productVendor` , MAX(  `quantityInStock` ) AS maxInStock
FROM products
GROUP BY  `productVendor` 
ORDER BY  `productVendor` 


13°)

/* Le prix de l'avion qui coûte le moins cher à l'achat */
/* RESULTAT ==> 1 ligne / 29.34$ */

Réponse:
SELECT MIN(`buyPrice`) AS cheapestPricePlane
FROM `products`
WHERE `productLine` = 'Planes'


14°)

/* Le crédit des clients qui ont payé plus de 20000$ durant l'année 2004 trié par crédit décroissant */
/* RESULTAT ==> 69 lignes / 141 / 293 765.51 */
/* Indication : regarder la clause HAVING */

SELECT `customerNumber`, SUM(`amount`) AS totalCredit
FROM payments
WHERE `paymentDate` BETWEEN '2004-01-01' AND '2004-12-31' 
GROUP BY `customerNumber` // ON RASSEMBLE TOUS LES CLIENTS 2004
HAVING totalCredit > 20000 // HAVING CAR ON FILTRE LE RESULTAT D'UN GROUP. ON FILTRE UN ENSEMBLE
ORDER BY totalCredit DESC



/******** JOINTURES INTERNES ********/
                                    

 15°)
    
/* La liste des employés (nom, prénom et fonction) et des bureaux (adresse et ville) dans lequel ils travaillent */
SELECT lastName, firstName, jobTitle, addressLine1, addressLine2, city
FROM employees
INNER JOIN offices ON offices.officeCode = employees.officeCode
/* RESULTAT ==> 23 lignes / Diane Murphy */


Réponse:
SELECT `customerNumber`, `contactLastName`, `contactFirstName`, "country", 'Lastname', 'firstname' 
FROM `customers`
INNER JOIN employees ON customers.salesRepEmployeeNumber = employees.employeeNumber
WHERE country IN ('France', 'USA')
ORDER BY `contactLastName`, `contactFirstName`




16°)

/* La liste des clients français ou américains (nom du client, nom, prénom du contact et pays) et de leur commercial dédié
 (nom et prénom) triés par nom et prénom du contact client */
/* RESULTAT ==> 48 lignes / Miguel Barajas */

Réponse:
SELECT customerName, contactLastName, contactFirstName, country, lastName, firstName
FROM customers // Je bosse à partir de customers 
INNER JOIN employees ON customers.salesRepEmployeeNumber = employees.employeeNumber // Et j'appelle le tab employees. 
Je crée un lien avec ON puis je mets en premier le tableau qui reçoit avec après le . le nom de la ligne responsable du lien entre les tableaux. Je fais = pour valider le lien et l'importation en faisant nom de l'autretab.sa ligne responsable de l'importation 
WHERE country IN ('France', 'USA')
ORDER BY contactLastName, contactFirstName




17°)

/* La liste des lignes de commande (numéro de commande, code, nom et ligne de produit) et la remise appliquée aux voitures
ou motos commandées triées par numéro de commande puis par remise décroissante */
/* RESULTAT ==> 2026 lignes / 34 */












                               